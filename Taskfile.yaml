version: '3'

vars:
  # 問題に応じて設定する必要がある変数
  USER: isucon
  BIN_NAME: 
  BUILD_DIR: 
  SERVICE_NAME:
  ENV_FILE: .env

  # 基本共通の変数 -------
  DB_PATH: /etc/mysql
  NGINX_PATH: /etc/nginx
  SYSTEMD_PATH: /etc/systemd/system

  NGINX_LOG: /var/log/nginx/access.log
  DB_SLOW_LOG: /var/log/mysql/mysql-slow.log

  # http://localhost:19999/netdata.confのdirectories.webで確認可能
  NETDATA_WEBROOT_PATH: /var/lib/netdata/www
  NETDATA_CUSTOM_HTML: ~/tool-config/netdata/*

dotenv:
  - "{{.ENV_FILE}}"

tasks:
  bench:
    desc: ベンチマーク実行前に全インスタンスで実行する
    cmds:
      - task: check-server-id
      # - task: discocat-now-status
      - task: delete-logs
      - task: deploy-conf
      - task: build
      - task: restart
      - task: watch-service-log

  pprof:
    desc: pprofで記録する
    cmds:
      # discocatで送信
      - go tool pprof -top http://localhost:6060/debug/pprof/profile
      # 作成されたものの情報をdiscocatで送信

  fgprof:
    desc: fgprofで記録する
    cmds:
      # discocatで送信
      - go tool pprof -top http://localhost:6060/debug/fgprof
      # 作成されたものの情報をdiscocatで送信
  
  pprof-check:
    desc: pprof/fgprofでの最新データを確認する
    vars:
      LATEST:
        sh: ls -rt pprof/ | tail -n 1
    cmds:
      - go tool pprof -http=localhost:8090 pprof/{{.LATEST}}

  # send-data:

  # 各情報の環境変数名が回によって違うので要注意
  mysql:
    desc: mysqlに接続する (環境変数名を要確認)
    cmds:
      - mysql -h $MYSQL_HOST -P MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASS $MYSQL_DBNAME

  setup:
    desc: インスタンスを立てたら最初に実行する
    cmds:
      - task: install-tools
      - task: git-setup

  get-conf:
    desc: 設定ファイルを取得してgit管理下に配置する
    cmds:
      - task: check-server-id
      - task: get-db-conf
      - task: get-nginx-conf
      - task: get-service-file
      - task: get-env-file

  # 本番中直接実行しないもの ---------
  install-tools:
    vars: 
      ALP_VERSION: v1.0.21
      DOOL_VERSION: "1.3.0"
    cmds:
      - sudo apt update
      - sudo apt upgrade
      - sudo apt install -y percona-toolkit git unzip snapd graphviz tree wget
      # doolのインストール
      - wget -O dtool.zip https://github.com/scottchiefbaker/dool/archive/refs/tags/v{{.DOOL_VERSION}}.zip
      - unzip dool.zip
      - cd dool/dool-{{.DOOL_VERSION}} && python install.py
      - rm dool.zip dool
      # alpのインストール
      - wget https://github.com/tkuchiki/alp/releases/download/{{.ALP_VERSION}}/alp_linux_amd64.zip
      - unzip alp_linux_amd64.zip
      - sudo install alp /usr/local/bin/alp
      - rm alp_linux_amd64.zip alp
      # netdataのインストール
      - wget -O /tmp/netdata-kickstart.sh https://my-netdata.io/kickstart.sh && sh /tmp/netdata-kickstart.sh --no-updates --stable-channel --disable-telemetry
  
  git-setup:
    cmds:
      - git config --global user.email "isucon@example.com"
      - git config --global user.name "isucon"
      # deploykeyの作成
      - ssh-keygen -t ed25519
  
  # 環境変数SERVER_IDが登録されているかを検証する
  # SERVER_IDの値を使うコマンドでは、基本preconditionsで呼ぶようにする
  check-server-id:
    preconditions:
      - sh: '[ $SERVER_ID != "" ]'
        msg: Env SERVER_ID is unset
    cmd: echo "SERVER_ID = $SERVER_ID"
  
  get-db-conf:
    preconditions:
      - task: check-server-id
    cmds:
      - sudo cp -R {{.DB_PATH}}/* ~/$SERVER_ID/etc/mysql
      - sudo chown {{.USER}} -R ~/$SERVER_ID/etc/mysql
  
  get-nginx-conf:
    preconditions:
      - task: check-server-id
    cmds:
      - sudo cp -R {{.NGINX_PATH}}/* ~/$SERVER_ID/etc/nginx
      - sudo chown {{.USER}} -R ~/$SERVER_ID/etc/nginx
  
  get-service-file:
    preconditions:
      - task: check-server-id
    cmds:
      - sudo cp {{.SYSTEMD_PATH}}/{{.SERVICE_NAME}} ~/$SERVER_ID/etc/systemd/system/{{.SERVICE_NAME}}
      - sudo chown {{.USER}} ~/$SERVER_ID/etc/systemd/system/{{.SERVICE_NAME}}
  
  get-env-file:
    preconditions:
      - task: check-server-id
    cmds:
      - cp ~/{{.ENV_FILE}} ~/$SERVER_ID/home/isucon/{{.ENV_FILE}}
  
  # 設定ファイルの配置
  deploy-conf:
    cmds:
      - task: check-server-id
      - task: deploy-db-conf
      - task: deploy-nginx-conf
      - task: deploy-service-file
      - task: deploy-envfile

  deploy-db-conf:
    preconditions:
      - task: check-server-id
    cmds:
      - sudo cp -R ~/$SERVER_ID/etc/mysql/* {{.DB_PATH}}
  
  deploy-nginx-conf:
    preconditions:
      - task: check-server-id
    cmds:
      - sudo cp -R ~/$SERVER_ID/etc/nginx/* {{.NGINX_PATH}}

  deploy-service-file:
    preconditions:
      - task: check-server-id
    cmds:
      - sudo cp ~/$SERVER_ID/etc/systemd/system/{{.SERVICE_NAME}} {{.SYSTEMD_PATH}}/{{.SERVICE_NAME}}

  deploy-envfile:
    preconditions:
      - task: check-server-id

  delete-logs:
    cmds:
      - sudo rm -f {{.NGINX_LOG}}
      - sudo rm -f {{.DB_SLOW_LOG}}
  
  build:
    cmds:
      - cd {{.BUILD_DIR}} && go build -o {{.BIN_NAME}}

  restart:
    cmds:
      - sudo systemctl daemon-reload
      - sudo systemctl restart {{.SERVICE_NAME}}
      - sudo systemctl restart mysql
      - sudo systemctl restart nginx

  watch-service-log:
    cmds:
      - sudo journalctl -u {{.SERVICE_NAME}} -n10 -f

  test:
    cmds:
      - task check-server-id >> test.txt
